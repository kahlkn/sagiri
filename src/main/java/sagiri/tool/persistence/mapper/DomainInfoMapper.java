package sagiri.tool.persistence.mapper;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import sagiri.tool.persistence.entity.DomainInfo;
import sagiri.tool.persistence.entity.DomainInfoQuery;

import java.util.List;

/**
 * DomainInfoMapper.
 * @author Kahle
 * @date 2019-11-08T09:48:18.613+0800
 */
@Mapper
public interface DomainInfoMapper {

    /* (Start) This will be covered, please do not modify. */
    /**
     * Insert.
     * @param record The object to insert
     * @return Number of rows effected
     */
    int insert(DomainInfo record);

    /**
     * Insert batch.
     * @param recordList A list of records to insert
     * @return Number of rows effected
     */
    int insertBatch(@Param("recordList") List<DomainInfo> recordList);

    /**
     * Insert selective.
     * @param record The object to insert
     * @return Number of rows effected
     */
    int insertSelective(DomainInfo record);

    /**
     * Delete by primary key.
     * @param id Primary key
     * @param updateUser Current operator
     * @return Number of rows effected
     */
    int deleteByPrimaryKey(@Param("id") Long id, @Param("updateUser") String updateUser);

    /**
     * Delete by primary key list.
     * @param idList Primary key list
     * @param updateUser Current operator
     * @return Number of rows effected
     */
    int deleteByPrimaryKeyList(@Param("idList") List<Long> idList, @Param("updateUser") String updateUser);

    /**
     * Delete selective.
     * @param record Delete conditions
     * @return Number of rows effected
     */
    int deleteSelective(DomainInfo record);

    /**
     * Update by primary key.
     * @param record Content to be updated
     * @return Number of rows effected
     */
    int updateByPrimaryKey(DomainInfo record);

    /**
     * Update by primary key selective.
     * @param record Content to be updated
     * @return Number of rows effected
     */
    int updateByPrimaryKeySelective(DomainInfo record);

    /**
     * Conditional counting.
     * @param record Query condition
     * @return Count result
     */
    int countSelective(DomainInfo record);

    /**
     * Query by primary key.
     * @param id Primary key
     * @return Query result
     */
    DomainInfo queryByPrimaryKey(@Param("id") Long id);

    /**
     * Query by primary key list.
     * @param idList Primary key list
     * @return Query result list
     */
    List<DomainInfo> queryByPrimaryKeyList(@Param("idList") List<Long> idList);

    /**
     * Find first.
     * @param record Query condition
     * @return Query result
     */
    DomainInfo findFirst(DomainInfo record);

    /**
     * Query selective.
     * @param record Query condition
     * @return Query result list
     */
    List<DomainInfo> querySelective(DomainInfo record);
    /* (End) This will be covered, please do not modify. */
    /* Generated by artoria-extend in 2019-11-08T09:48:22.293+0800. */

    List<DomainInfo> queryDomainInfoList(DomainInfoQuery domainInfoQuery);

}
